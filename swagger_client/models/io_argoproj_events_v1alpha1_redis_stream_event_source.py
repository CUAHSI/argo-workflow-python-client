# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojEventsV1alpha1RedisStreamEventSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumer_group': 'str',
        'db': 'int',
        'filter': 'IoArgoprojEventsV1alpha1EventSourceFilter',
        'host_address': 'str',
        'max_msg_count_per_read': 'int',
        'metadata': 'dict(str, str)',
        'password': 'IoK8sApiCoreV1SecretKeySelector',
        'streams': 'list[str]',
        'tls': 'IoArgoprojEventsV1alpha1TLSConfig',
        'username': 'str'
    }

    attribute_map = {
        'consumer_group': 'consumerGroup',
        'db': 'db',
        'filter': 'filter',
        'host_address': 'hostAddress',
        'max_msg_count_per_read': 'maxMsgCountPerRead',
        'metadata': 'metadata',
        'password': 'password',
        'streams': 'streams',
        'tls': 'tls',
        'username': 'username'
    }

    def __init__(self, consumer_group=None, db=None, filter=None, host_address=None, max_msg_count_per_read=None, metadata=None, password=None, streams=None, tls=None, username=None, _configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1RedisStreamEventSource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._consumer_group = None
        self._db = None
        self._filter = None
        self._host_address = None
        self._max_msg_count_per_read = None
        self._metadata = None
        self._password = None
        self._streams = None
        self._tls = None
        self._username = None
        self.discriminator = None

        if consumer_group is not None:
            self.consumer_group = consumer_group
        if db is not None:
            self.db = db
        if filter is not None:
            self.filter = filter
        if host_address is not None:
            self.host_address = host_address
        if max_msg_count_per_read is not None:
            self.max_msg_count_per_read = max_msg_count_per_read
        if metadata is not None:
            self.metadata = metadata
        if password is not None:
            self.password = password
        if streams is not None:
            self.streams = streams
        if tls is not None:
            self.tls = tls
        if username is not None:
            self.username = username

    @property
    def consumer_group(self):
        """Gets the consumer_group of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The consumer_group of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: str
        """
        return self._consumer_group

    @consumer_group.setter
    def consumer_group(self, consumer_group):
        """Sets the consumer_group of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param consumer_group: The consumer_group of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: str
        """

        self._consumer_group = consumer_group

    @property
    def db(self):
        """Gets the db of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The db of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: int
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param db: The db of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: int
        """

        self._db = db

    @property
    def filter(self):
        """Gets the filter of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The filter of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1EventSourceFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param filter: The filter of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1EventSourceFilter
        """

        self._filter = filter

    @property
    def host_address(self):
        """Gets the host_address of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The host_address of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: str
        """
        return self._host_address

    @host_address.setter
    def host_address(self, host_address):
        """Sets the host_address of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param host_address: The host_address of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: str
        """

        self._host_address = host_address

    @property
    def max_msg_count_per_read(self):
        """Gets the max_msg_count_per_read of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The max_msg_count_per_read of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: int
        """
        return self._max_msg_count_per_read

    @max_msg_count_per_read.setter
    def max_msg_count_per_read(self, max_msg_count_per_read):
        """Sets the max_msg_count_per_read of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param max_msg_count_per_read: The max_msg_count_per_read of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: int
        """

        self._max_msg_count_per_read = max_msg_count_per_read

    @property
    def metadata(self):
        """Gets the metadata of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The metadata of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param metadata: The metadata of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def password(self):
        """Gets the password of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The password of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param password: The password of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._password = password

    @property
    def streams(self):
        """Gets the streams of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501

        Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.  # noqa: E501

        :return: The streams of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this IoArgoprojEventsV1alpha1RedisStreamEventSource.

        Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.  # noqa: E501

        :param streams: The streams of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: list[str]
        """

        self._streams = streams

    @property
    def tls(self):
        """Gets the tls of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The tls of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1TLSConfig
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param tls: The tls of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1TLSConfig
        """

        self._tls = tls

    @property
    def username(self):
        """Gets the username of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501


        :return: The username of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this IoArgoprojEventsV1alpha1RedisStreamEventSource.


        :param username: The username of this IoArgoprojEventsV1alpha1RedisStreamEventSource.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojEventsV1alpha1RedisStreamEventSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1RedisStreamEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1RedisStreamEventSource):
            return True

        return self.to_dict() != other.to_dict()

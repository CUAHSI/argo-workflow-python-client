# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1ArtifactResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'name': 'str',
        'success': 'bool'
    }

    attribute_map = {
        'error': 'error',
        'name': 'name',
        'success': 'success'
    }

    def __init__(self, error=None, name=None, success=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1ArtifactResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error = None
        self._name = None
        self._success = None
        self.discriminator = None

        if error is not None:
            self.error = error
        self.name = name
        if success is not None:
            self.success = success

    @property
    def error(self):
        """Gets the error of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501

        Error is an optional error message which should be set if Success==false  # noqa: E501

        :return: The error of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this IoArgoprojWorkflowV1alpha1ArtifactResult.

        Error is an optional error message which should be set if Success==false  # noqa: E501

        :param error: The error of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def name(self):
        """Gets the name of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501

        Name is the name of the Artifact  # noqa: E501

        :return: The name of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojWorkflowV1alpha1ArtifactResult.

        Name is the name of the Artifact  # noqa: E501

        :param name: The name of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def success(self):
        """Gets the success of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501

        Success describes whether the deletion succeeded  # noqa: E501

        :return: The success of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this IoArgoprojWorkflowV1alpha1ArtifactResult.

        Success describes whether the deletion succeeded  # noqa: E501

        :param success: The success of this IoArgoprojWorkflowV1alpha1ArtifactResult.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1ArtifactResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactResult):
            return True

        return self.to_dict() != other.to_dict()

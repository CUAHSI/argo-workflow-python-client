# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojEventsV1alpha1EventDependency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_name': 'str',
        'event_source_name': 'str',
        'filters': 'IoArgoprojEventsV1alpha1EventDependencyFilter',
        'filters_logical_operator': 'str',
        'name': 'str',
        'transform': 'IoArgoprojEventsV1alpha1EventDependencyTransformer'
    }

    attribute_map = {
        'event_name': 'eventName',
        'event_source_name': 'eventSourceName',
        'filters': 'filters',
        'filters_logical_operator': 'filtersLogicalOperator',
        'name': 'name',
        'transform': 'transform'
    }

    def __init__(self, event_name=None, event_source_name=None, filters=None, filters_logical_operator=None, name=None, transform=None, _configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1EventDependency - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._event_name = None
        self._event_source_name = None
        self._filters = None
        self._filters_logical_operator = None
        self._name = None
        self._transform = None
        self.discriminator = None

        if event_name is not None:
            self.event_name = event_name
        if event_source_name is not None:
            self.event_source_name = event_source_name
        if filters is not None:
            self.filters = filters
        if filters_logical_operator is not None:
            self.filters_logical_operator = filters_logical_operator
        if name is not None:
            self.name = name
        if transform is not None:
            self.transform = transform

    @property
    def event_name(self):
        """Gets the event_name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501


        :return: The event_name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this IoArgoprojEventsV1alpha1EventDependency.


        :param event_name: The event_name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def event_source_name(self):
        """Gets the event_source_name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501


        :return: The event_source_name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :rtype: str
        """
        return self._event_source_name

    @event_source_name.setter
    def event_source_name(self, event_source_name):
        """Sets the event_source_name of this IoArgoprojEventsV1alpha1EventDependency.


        :param event_source_name: The event_source_name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :type: str
        """

        self._event_source_name = event_source_name

    @property
    def filters(self):
        """Gets the filters of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501


        :return: The filters of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1EventDependencyFilter
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this IoArgoprojEventsV1alpha1EventDependency.


        :param filters: The filters of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1EventDependencyFilter
        """

        self._filters = filters

    @property
    def filters_logical_operator(self):
        """Gets the filters_logical_operator of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501

        FiltersLogicalOperator defines how different filters are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).  # noqa: E501

        :return: The filters_logical_operator of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :rtype: str
        """
        return self._filters_logical_operator

    @filters_logical_operator.setter
    def filters_logical_operator(self, filters_logical_operator):
        """Sets the filters_logical_operator of this IoArgoprojEventsV1alpha1EventDependency.

        FiltersLogicalOperator defines how different filters are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).  # noqa: E501

        :param filters_logical_operator: The filters_logical_operator of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :type: str
        """

        self._filters_logical_operator = filters_logical_operator

    @property
    def name(self):
        """Gets the name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501


        :return: The name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojEventsV1alpha1EventDependency.


        :param name: The name of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def transform(self):
        """Gets the transform of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501


        :return: The transform of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1EventDependencyTransformer
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this IoArgoprojEventsV1alpha1EventDependency.


        :param transform: The transform of this IoArgoprojEventsV1alpha1EventDependency.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1EventDependencyTransformer
        """

        self._transform = transform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojEventsV1alpha1EventDependency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1EventDependency):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1EventDependency):
            return True

        return self.to_dict() != other.to_dict()

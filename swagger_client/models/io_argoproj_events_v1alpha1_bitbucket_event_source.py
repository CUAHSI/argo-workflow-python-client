# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojEventsV1alpha1BitbucketEventSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth': 'IoArgoprojEventsV1alpha1BitbucketAuth',
        'delete_hook_on_finish': 'bool',
        'events': 'list[str]',
        'filter': 'IoArgoprojEventsV1alpha1EventSourceFilter',
        'metadata': 'dict(str, str)',
        'owner': 'str',
        'project_key': 'str',
        'repositories': 'list[IoArgoprojEventsV1alpha1BitbucketRepository]',
        'repository_slug': 'str',
        'webhook': 'IoArgoprojEventsV1alpha1WebhookContext'
    }

    attribute_map = {
        'auth': 'auth',
        'delete_hook_on_finish': 'deleteHookOnFinish',
        'events': 'events',
        'filter': 'filter',
        'metadata': 'metadata',
        'owner': 'owner',
        'project_key': 'projectKey',
        'repositories': 'repositories',
        'repository_slug': 'repositorySlug',
        'webhook': 'webhook'
    }

    def __init__(self, auth=None, delete_hook_on_finish=None, events=None, filter=None, metadata=None, owner=None, project_key=None, repositories=None, repository_slug=None, webhook=None, _configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1BitbucketEventSource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth = None
        self._delete_hook_on_finish = None
        self._events = None
        self._filter = None
        self._metadata = None
        self._owner = None
        self._project_key = None
        self._repositories = None
        self._repository_slug = None
        self._webhook = None
        self.discriminator = None

        if auth is not None:
            self.auth = auth
        if delete_hook_on_finish is not None:
            self.delete_hook_on_finish = delete_hook_on_finish
        if events is not None:
            self.events = events
        if filter is not None:
            self.filter = filter
        if metadata is not None:
            self.metadata = metadata
        if owner is not None:
            self.owner = owner
        if project_key is not None:
            self.project_key = project_key
        if repositories is not None:
            self.repositories = repositories
        if repository_slug is not None:
            self.repository_slug = repository_slug
        if webhook is not None:
            self.webhook = webhook

    @property
    def auth(self):
        """Gets the auth of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501

        Auth information required to connect to Bitbucket.  # noqa: E501

        :return: The auth of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1BitbucketAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this IoArgoprojEventsV1alpha1BitbucketEventSource.

        Auth information required to connect to Bitbucket.  # noqa: E501

        :param auth: The auth of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1BitbucketAuth
        """

        self._auth = auth

    @property
    def delete_hook_on_finish(self):
        """Gets the delete_hook_on_finish of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The delete_hook_on_finish of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._delete_hook_on_finish

    @delete_hook_on_finish.setter
    def delete_hook_on_finish(self, delete_hook_on_finish):
        """Sets the delete_hook_on_finish of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param delete_hook_on_finish: The delete_hook_on_finish of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: bool
        """

        self._delete_hook_on_finish = delete_hook_on_finish

    @property
    def events(self):
        """Gets the events of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501

        Events this webhook is subscribed to.  # noqa: E501

        :return: The events of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this IoArgoprojEventsV1alpha1BitbucketEventSource.

        Events this webhook is subscribed to.  # noqa: E501

        :param events: The events of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def filter(self):
        """Gets the filter of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The filter of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1EventSourceFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param filter: The filter of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1EventSourceFilter
        """

        self._filter = filter

    @property
    def metadata(self):
        """Gets the metadata of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The metadata of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param metadata: The metadata of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def owner(self):
        """Gets the owner of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The owner of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param owner: The owner of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def project_key(self):
        """Gets the project_key of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The project_key of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: str
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param project_key: The project_key of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: str
        """

        self._project_key = project_key

    @property
    def repositories(self):
        """Gets the repositories of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The repositories of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1BitbucketRepository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param repositories: The repositories of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1BitbucketRepository]
        """

        self._repositories = repositories

    @property
    def repository_slug(self):
        """Gets the repository_slug of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The repository_slug of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: str
        """
        return self._repository_slug

    @repository_slug.setter
    def repository_slug(self, repository_slug):
        """Sets the repository_slug of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param repository_slug: The repository_slug of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: str
        """

        self._repository_slug = repository_slug

    @property
    def webhook(self):
        """Gets the webhook of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501


        :return: The webhook of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1WebhookContext
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this IoArgoprojEventsV1alpha1BitbucketEventSource.


        :param webhook: The webhook of this IoArgoprojEventsV1alpha1BitbucketEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1WebhookContext
        """

        self._webhook = webhook

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojEventsV1alpha1BitbucketEventSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1BitbucketEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1BitbucketEventSource):
            return True

        return self.to_dict() != other.to_dict()

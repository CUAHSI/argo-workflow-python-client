# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojEventsV1alpha1EventDependencyFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'IoArgoprojEventsV1alpha1EventContext',
        'data': 'list[IoArgoprojEventsV1alpha1DataFilter]',
        'data_logical_operator': 'str',
        'expr_logical_operator': 'str',
        'exprs': 'list[IoArgoprojEventsV1alpha1ExprFilter]',
        'script': 'str',
        'time': 'IoArgoprojEventsV1alpha1TimeFilter'
    }

    attribute_map = {
        'context': 'context',
        'data': 'data',
        'data_logical_operator': 'dataLogicalOperator',
        'expr_logical_operator': 'exprLogicalOperator',
        'exprs': 'exprs',
        'script': 'script',
        'time': 'time'
    }

    def __init__(self, context=None, data=None, data_logical_operator=None, expr_logical_operator=None, exprs=None, script=None, time=None, _configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1EventDependencyFilter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._context = None
        self._data = None
        self._data_logical_operator = None
        self._expr_logical_operator = None
        self._exprs = None
        self._script = None
        self._time = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if data is not None:
            self.data = data
        if data_logical_operator is not None:
            self.data_logical_operator = data_logical_operator
        if expr_logical_operator is not None:
            self.expr_logical_operator = expr_logical_operator
        if exprs is not None:
            self.exprs = exprs
        if script is not None:
            self.script = script
        if time is not None:
            self.time = time

    @property
    def context(self):
        """Gets the context of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501


        :return: The context of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1EventContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this IoArgoprojEventsV1alpha1EventDependencyFilter.


        :param context: The context of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1EventContext
        """

        self._context = context

    @property
    def data(self):
        """Gets the data of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501


        :return: The data of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1DataFilter]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this IoArgoprojEventsV1alpha1EventDependencyFilter.


        :param data: The data of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1DataFilter]
        """

        self._data = data

    @property
    def data_logical_operator(self):
        """Gets the data_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501

        DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).  # noqa: E501

        :return: The data_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :rtype: str
        """
        return self._data_logical_operator

    @data_logical_operator.setter
    def data_logical_operator(self, data_logical_operator):
        """Sets the data_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.

        DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).  # noqa: E501

        :param data_logical_operator: The data_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :type: str
        """

        self._data_logical_operator = data_logical_operator

    @property
    def expr_logical_operator(self):
        """Gets the expr_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501

        ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).  # noqa: E501

        :return: The expr_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :rtype: str
        """
        return self._expr_logical_operator

    @expr_logical_operator.setter
    def expr_logical_operator(self, expr_logical_operator):
        """Sets the expr_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.

        ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).  # noqa: E501

        :param expr_logical_operator: The expr_logical_operator of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :type: str
        """

        self._expr_logical_operator = expr_logical_operator

    @property
    def exprs(self):
        """Gets the exprs of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501

        Exprs contains the list of expressions evaluated against the event payload.  # noqa: E501

        :return: The exprs of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1ExprFilter]
        """
        return self._exprs

    @exprs.setter
    def exprs(self, exprs):
        """Sets the exprs of this IoArgoprojEventsV1alpha1EventDependencyFilter.

        Exprs contains the list of expressions evaluated against the event payload.  # noqa: E501

        :param exprs: The exprs of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1ExprFilter]
        """

        self._exprs = exprs

    @property
    def script(self):
        """Gets the script of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501

        Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.  # noqa: E501

        :return: The script of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this IoArgoprojEventsV1alpha1EventDependencyFilter.

        Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.  # noqa: E501

        :param script: The script of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def time(self):
        """Gets the time of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501


        :return: The time of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1TimeFilter
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this IoArgoprojEventsV1alpha1EventDependencyFilter.


        :param time: The time of this IoArgoprojEventsV1alpha1EventDependencyFilter.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1TimeFilter
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojEventsV1alpha1EventDependencyFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1EventDependencyFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1EventDependencyFilter):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_format': 'str',
        'password_secret': 'IoK8sApiCoreV1SecretKeySelector',
        'repo_url': 'str',
        'username_secret': 'IoK8sApiCoreV1SecretKeySelector'
    }

    attribute_map = {
        'key_format': 'keyFormat',
        'password_secret': 'passwordSecret',
        'repo_url': 'repoURL',
        'username_secret': 'usernameSecret'
    }

    def __init__(self, key_format=None, password_secret=None, repo_url=None, username_secret=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key_format = None
        self._password_secret = None
        self._repo_url = None
        self._username_secret = None
        self.discriminator = None

        if key_format is not None:
            self.key_format = key_format
        if password_secret is not None:
            self.password_secret = password_secret
        if repo_url is not None:
            self.repo_url = repo_url
        if username_secret is not None:
            self.username_secret = username_secret

    @property
    def key_format(self):
        """Gets the key_format of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501

        KeyFormat defines the format of how to store keys and can reference workflow variables.  # noqa: E501

        :return: The key_format of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._key_format

    @key_format.setter
    def key_format(self, key_format):
        """Sets the key_format of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.

        KeyFormat defines the format of how to store keys and can reference workflow variables.  # noqa: E501

        :param key_format: The key_format of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :type: str
        """

        self._key_format = key_format

    @property
    def password_secret(self):
        """Gets the password_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501

        PasswordSecret is the secret selector to the repository password  # noqa: E501

        :return: The password_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._password_secret

    @password_secret.setter
    def password_secret(self, password_secret):
        """Sets the password_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.

        PasswordSecret is the secret selector to the repository password  # noqa: E501

        :param password_secret: The password_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._password_secret = password_secret

    @property
    def repo_url(self):
        """Gets the repo_url of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501

        RepoURL is the url for artifactory repo.  # noqa: E501

        :return: The repo_url of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.

        RepoURL is the url for artifactory repo.  # noqa: E501

        :param repo_url: The repo_url of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :type: str
        """

        self._repo_url = repo_url

    @property
    def username_secret(self):
        """Gets the username_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501

        UsernameSecret is the secret selector to the repository username  # noqa: E501

        :return: The username_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._username_secret

    @username_secret.setter
    def username_secret(self, username_secret):
        """Sets the username_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.

        UsernameSecret is the secret selector to the repository username  # noqa: E501

        :param username_secret: The username_secret of this IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._username_secret = username_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository):
            return True

        return self.to_dict() != other.to_dict()

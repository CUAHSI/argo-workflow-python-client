# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojEventsV1alpha1SQSEventSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'IoK8sApiCoreV1SecretKeySelector',
        'dlq': 'bool',
        'endpoint': 'str',
        'filter': 'IoArgoprojEventsV1alpha1EventSourceFilter',
        'json_body': 'bool',
        'metadata': 'dict(str, str)',
        'queue': 'str',
        'queue_account_id': 'str',
        'region': 'str',
        'role_arn': 'str',
        'secret_key': 'IoK8sApiCoreV1SecretKeySelector',
        'session_token': 'IoK8sApiCoreV1SecretKeySelector',
        'wait_time_seconds': 'str'
    }

    attribute_map = {
        'access_key': 'accessKey',
        'dlq': 'dlq',
        'endpoint': 'endpoint',
        'filter': 'filter',
        'json_body': 'jsonBody',
        'metadata': 'metadata',
        'queue': 'queue',
        'queue_account_id': 'queueAccountId',
        'region': 'region',
        'role_arn': 'roleARN',
        'secret_key': 'secretKey',
        'session_token': 'sessionToken',
        'wait_time_seconds': 'waitTimeSeconds'
    }

    def __init__(self, access_key=None, dlq=None, endpoint=None, filter=None, json_body=None, metadata=None, queue=None, queue_account_id=None, region=None, role_arn=None, secret_key=None, session_token=None, wait_time_seconds=None, _configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1SQSEventSource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_key = None
        self._dlq = None
        self._endpoint = None
        self._filter = None
        self._json_body = None
        self._metadata = None
        self._queue = None
        self._queue_account_id = None
        self._region = None
        self._role_arn = None
        self._secret_key = None
        self._session_token = None
        self._wait_time_seconds = None
        self.discriminator = None

        if access_key is not None:
            self.access_key = access_key
        if dlq is not None:
            self.dlq = dlq
        if endpoint is not None:
            self.endpoint = endpoint
        if filter is not None:
            self.filter = filter
        if json_body is not None:
            self.json_body = json_body
        if metadata is not None:
            self.metadata = metadata
        if queue is not None:
            self.queue = queue
        if queue_account_id is not None:
            self.queue_account_id = queue_account_id
        if region is not None:
            self.region = region
        if role_arn is not None:
            self.role_arn = role_arn
        if secret_key is not None:
            self.secret_key = secret_key
        if session_token is not None:
            self.session_token = session_token
        if wait_time_seconds is not None:
            self.wait_time_seconds = wait_time_seconds

    @property
    def access_key(self):
        """Gets the access_key of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The access_key of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param access_key: The access_key of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._access_key = access_key

    @property
    def dlq(self):
        """Gets the dlq of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The dlq of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._dlq

    @dlq.setter
    def dlq(self, dlq):
        """Sets the dlq of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param dlq: The dlq of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: bool
        """

        self._dlq = dlq

    @property
    def endpoint(self):
        """Gets the endpoint of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The endpoint of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param endpoint: The endpoint of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def filter(self):
        """Gets the filter of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The filter of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1EventSourceFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param filter: The filter of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1EventSourceFilter
        """

        self._filter = filter

    @property
    def json_body(self):
        """Gets the json_body of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The json_body of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._json_body

    @json_body.setter
    def json_body(self, json_body):
        """Sets the json_body of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param json_body: The json_body of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: bool
        """

        self._json_body = json_body

    @property
    def metadata(self):
        """Gets the metadata of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The metadata of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param metadata: The metadata of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def queue(self):
        """Gets the queue of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The queue of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param queue: The queue of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: str
        """

        self._queue = queue

    @property
    def queue_account_id(self):
        """Gets the queue_account_id of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The queue_account_id of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: str
        """
        return self._queue_account_id

    @queue_account_id.setter
    def queue_account_id(self, queue_account_id):
        """Sets the queue_account_id of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param queue_account_id: The queue_account_id of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: str
        """

        self._queue_account_id = queue_account_id

    @property
    def region(self):
        """Gets the region of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The region of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param region: The region of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def role_arn(self):
        """Gets the role_arn of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The role_arn of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param role_arn: The role_arn of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: str
        """

        self._role_arn = role_arn

    @property
    def secret_key(self):
        """Gets the secret_key of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The secret_key of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param secret_key: The secret_key of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._secret_key = secret_key

    @property
    def session_token(self):
        """Gets the session_token of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501


        :return: The session_token of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this IoArgoprojEventsV1alpha1SQSEventSource.


        :param session_token: The session_token of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._session_token = session_token

    @property
    def wait_time_seconds(self):
        """Gets the wait_time_seconds of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501

        WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.  # noqa: E501

        :return: The wait_time_seconds of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :rtype: str
        """
        return self._wait_time_seconds

    @wait_time_seconds.setter
    def wait_time_seconds(self, wait_time_seconds):
        """Sets the wait_time_seconds of this IoArgoprojEventsV1alpha1SQSEventSource.

        WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.  # noqa: E501

        :param wait_time_seconds: The wait_time_seconds of this IoArgoprojEventsV1alpha1SQSEventSource.  # noqa: E501
        :type: str
        """

        self._wait_time_seconds = wait_time_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojEventsV1alpha1SQSEventSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1SQSEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1SQSEventSource):
            return True

        return self.to_dict() != other.to_dict()

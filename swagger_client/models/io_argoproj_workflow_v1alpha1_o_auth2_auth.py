# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1OAuth2Auth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id_secret': 'IoK8sApiCoreV1SecretKeySelector',
        'client_secret_secret': 'IoK8sApiCoreV1SecretKeySelector',
        'endpoint_params': 'list[IoArgoprojWorkflowV1alpha1OAuth2EndpointParam]',
        'scopes': 'list[str]',
        'token_url_secret': 'IoK8sApiCoreV1SecretKeySelector'
    }

    attribute_map = {
        'client_id_secret': 'clientIDSecret',
        'client_secret_secret': 'clientSecretSecret',
        'endpoint_params': 'endpointParams',
        'scopes': 'scopes',
        'token_url_secret': 'tokenURLSecret'
    }

    def __init__(self, client_id_secret=None, client_secret_secret=None, endpoint_params=None, scopes=None, token_url_secret=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1OAuth2Auth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_id_secret = None
        self._client_secret_secret = None
        self._endpoint_params = None
        self._scopes = None
        self._token_url_secret = None
        self.discriminator = None

        if client_id_secret is not None:
            self.client_id_secret = client_id_secret
        if client_secret_secret is not None:
            self.client_secret_secret = client_secret_secret
        if endpoint_params is not None:
            self.endpoint_params = endpoint_params
        if scopes is not None:
            self.scopes = scopes
        if token_url_secret is not None:
            self.token_url_secret = token_url_secret

    @property
    def client_id_secret(self):
        """Gets the client_id_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501


        :return: The client_id_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._client_id_secret

    @client_id_secret.setter
    def client_id_secret(self, client_id_secret):
        """Sets the client_id_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.


        :param client_id_secret: The client_id_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._client_id_secret = client_id_secret

    @property
    def client_secret_secret(self):
        """Gets the client_secret_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501


        :return: The client_secret_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._client_secret_secret

    @client_secret_secret.setter
    def client_secret_secret(self, client_secret_secret):
        """Sets the client_secret_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.


        :param client_secret_secret: The client_secret_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._client_secret_secret = client_secret_secret

    @property
    def endpoint_params(self):
        """Gets the endpoint_params of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501


        :return: The endpoint_params of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :rtype: list[IoArgoprojWorkflowV1alpha1OAuth2EndpointParam]
        """
        return self._endpoint_params

    @endpoint_params.setter
    def endpoint_params(self, endpoint_params):
        """Sets the endpoint_params of this IoArgoprojWorkflowV1alpha1OAuth2Auth.


        :param endpoint_params: The endpoint_params of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :type: list[IoArgoprojWorkflowV1alpha1OAuth2EndpointParam]
        """

        self._endpoint_params = endpoint_params

    @property
    def scopes(self):
        """Gets the scopes of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501


        :return: The scopes of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this IoArgoprojWorkflowV1alpha1OAuth2Auth.


        :param scopes: The scopes of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def token_url_secret(self):
        """Gets the token_url_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501


        :return: The token_url_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._token_url_secret

    @token_url_secret.setter
    def token_url_secret(self, token_url_secret):
        """Sets the token_url_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.


        :param token_url_secret: The token_url_secret of this IoArgoprojWorkflowV1alpha1OAuth2Auth.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._token_url_secret = token_url_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1OAuth2Auth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1OAuth2Auth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1OAuth2Auth):
            return True

        return self.to_dict() != other.to_dict()

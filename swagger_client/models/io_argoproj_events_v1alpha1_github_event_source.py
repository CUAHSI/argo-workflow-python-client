# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojEventsV1alpha1GithubEventSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'api_token': 'IoK8sApiCoreV1SecretKeySelector',
        'content_type': 'str',
        'delete_hook_on_finish': 'bool',
        'events': 'list[str]',
        'filter': 'IoArgoprojEventsV1alpha1EventSourceFilter',
        'github_app': 'IoArgoprojEventsV1alpha1GithubAppCreds',
        'github_base_url': 'str',
        'github_upload_url': 'str',
        'id': 'str',
        'insecure': 'bool',
        'metadata': 'dict(str, str)',
        'organizations': 'list[str]',
        'owner': 'str',
        'repositories': 'list[IoArgoprojEventsV1alpha1OwnedRepositories]',
        'repository': 'str',
        'webhook': 'IoArgoprojEventsV1alpha1WebhookContext',
        'webhook_secret': 'IoK8sApiCoreV1SecretKeySelector'
    }

    attribute_map = {
        'active': 'active',
        'api_token': 'apiToken',
        'content_type': 'contentType',
        'delete_hook_on_finish': 'deleteHookOnFinish',
        'events': 'events',
        'filter': 'filter',
        'github_app': 'githubApp',
        'github_base_url': 'githubBaseURL',
        'github_upload_url': 'githubUploadURL',
        'id': 'id',
        'insecure': 'insecure',
        'metadata': 'metadata',
        'organizations': 'organizations',
        'owner': 'owner',
        'repositories': 'repositories',
        'repository': 'repository',
        'webhook': 'webhook',
        'webhook_secret': 'webhookSecret'
    }

    def __init__(self, active=None, api_token=None, content_type=None, delete_hook_on_finish=None, events=None, filter=None, github_app=None, github_base_url=None, github_upload_url=None, id=None, insecure=None, metadata=None, organizations=None, owner=None, repositories=None, repository=None, webhook=None, webhook_secret=None, _configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1GithubEventSource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._api_token = None
        self._content_type = None
        self._delete_hook_on_finish = None
        self._events = None
        self._filter = None
        self._github_app = None
        self._github_base_url = None
        self._github_upload_url = None
        self._id = None
        self._insecure = None
        self._metadata = None
        self._organizations = None
        self._owner = None
        self._repositories = None
        self._repository = None
        self._webhook = None
        self._webhook_secret = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if api_token is not None:
            self.api_token = api_token
        if content_type is not None:
            self.content_type = content_type
        if delete_hook_on_finish is not None:
            self.delete_hook_on_finish = delete_hook_on_finish
        if events is not None:
            self.events = events
        if filter is not None:
            self.filter = filter
        if github_app is not None:
            self.github_app = github_app
        if github_base_url is not None:
            self.github_base_url = github_base_url
        if github_upload_url is not None:
            self.github_upload_url = github_upload_url
        if id is not None:
            self.id = id
        if insecure is not None:
            self.insecure = insecure
        if metadata is not None:
            self.metadata = metadata
        if organizations is not None:
            self.organizations = organizations
        if owner is not None:
            self.owner = owner
        if repositories is not None:
            self.repositories = repositories
        if repository is not None:
            self.repository = repository
        if webhook is not None:
            self.webhook = webhook
        if webhook_secret is not None:
            self.webhook_secret = webhook_secret

    @property
    def active(self):
        """Gets the active of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The active of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param active: The active of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def api_token(self):
        """Gets the api_token of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The api_token of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param api_token: The api_token of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._api_token = api_token

    @property
    def content_type(self):
        """Gets the content_type of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The content_type of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param content_type: The content_type of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def delete_hook_on_finish(self):
        """Gets the delete_hook_on_finish of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The delete_hook_on_finish of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._delete_hook_on_finish

    @delete_hook_on_finish.setter
    def delete_hook_on_finish(self, delete_hook_on_finish):
        """Sets the delete_hook_on_finish of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param delete_hook_on_finish: The delete_hook_on_finish of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: bool
        """

        self._delete_hook_on_finish = delete_hook_on_finish

    @property
    def events(self):
        """Gets the events of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The events of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param events: The events of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def filter(self):
        """Gets the filter of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The filter of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1EventSourceFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param filter: The filter of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1EventSourceFilter
        """

        self._filter = filter

    @property
    def github_app(self):
        """Gets the github_app of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The github_app of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1GithubAppCreds
        """
        return self._github_app

    @github_app.setter
    def github_app(self, github_app):
        """Sets the github_app of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param github_app: The github_app of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1GithubAppCreds
        """

        self._github_app = github_app

    @property
    def github_base_url(self):
        """Gets the github_base_url of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The github_base_url of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._github_base_url

    @github_base_url.setter
    def github_base_url(self, github_base_url):
        """Sets the github_base_url of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param github_base_url: The github_base_url of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: str
        """

        self._github_base_url = github_base_url

    @property
    def github_upload_url(self):
        """Gets the github_upload_url of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The github_upload_url of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._github_upload_url

    @github_upload_url.setter
    def github_upload_url(self, github_upload_url):
        """Sets the github_upload_url of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param github_upload_url: The github_upload_url of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: str
        """

        self._github_upload_url = github_upload_url

    @property
    def id(self):
        """Gets the id of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The id of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param id: The id of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def insecure(self):
        """Gets the insecure of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The insecure of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """Sets the insecure of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param insecure: The insecure of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: bool
        """

        self._insecure = insecure

    @property
    def metadata(self):
        """Gets the metadata of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The metadata of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param metadata: The metadata of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def organizations(self):
        """Gets the organizations of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501

        Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.  # noqa: E501

        :return: The organizations of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this IoArgoprojEventsV1alpha1GithubEventSource.

        Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.  # noqa: E501

        :param organizations: The organizations of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: list[str]
        """

        self._organizations = organizations

    @property
    def owner(self):
        """Gets the owner of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The owner of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param owner: The owner of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def repositories(self):
        """Gets the repositories of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501

        Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.  # noqa: E501

        :return: The repositories of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1OwnedRepositories]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this IoArgoprojEventsV1alpha1GithubEventSource.

        Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.  # noqa: E501

        :param repositories: The repositories of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1OwnedRepositories]
        """

        self._repositories = repositories

    @property
    def repository(self):
        """Gets the repository of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The repository of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param repository: The repository of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def webhook(self):
        """Gets the webhook of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The webhook of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1WebhookContext
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param webhook: The webhook of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1WebhookContext
        """

        self._webhook = webhook

    @property
    def webhook_secret(self):
        """Gets the webhook_secret of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501


        :return: The webhook_secret of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._webhook_secret

    @webhook_secret.setter
    def webhook_secret(self, webhook_secret):
        """Sets the webhook_secret of this IoArgoprojEventsV1alpha1GithubEventSource.


        :param webhook_secret: The webhook_secret of this IoArgoprojEventsV1alpha1GithubEventSource.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._webhook_secret = webhook_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojEventsV1alpha1GithubEventSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1GithubEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1GithubEventSource):
            return True

        return self.to_dict() != other.to_dict()

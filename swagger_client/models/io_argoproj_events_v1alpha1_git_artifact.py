# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojEventsV1alpha1GitArtifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch': 'str',
        'clone_directory': 'str',
        'creds': 'IoArgoprojEventsV1alpha1GitCreds',
        'file_path': 'str',
        'insecure_ignore_host_key': 'bool',
        'ref': 'str',
        'remote': 'IoArgoprojEventsV1alpha1GitRemoteConfig',
        'ssh_key_secret': 'IoK8sApiCoreV1SecretKeySelector',
        'tag': 'str',
        'url': 'str'
    }

    attribute_map = {
        'branch': 'branch',
        'clone_directory': 'cloneDirectory',
        'creds': 'creds',
        'file_path': 'filePath',
        'insecure_ignore_host_key': 'insecureIgnoreHostKey',
        'ref': 'ref',
        'remote': 'remote',
        'ssh_key_secret': 'sshKeySecret',
        'tag': 'tag',
        'url': 'url'
    }

    def __init__(self, branch=None, clone_directory=None, creds=None, file_path=None, insecure_ignore_host_key=None, ref=None, remote=None, ssh_key_secret=None, tag=None, url=None, _configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1GitArtifact - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._branch = None
        self._clone_directory = None
        self._creds = None
        self._file_path = None
        self._insecure_ignore_host_key = None
        self._ref = None
        self._remote = None
        self._ssh_key_secret = None
        self._tag = None
        self._url = None
        self.discriminator = None

        if branch is not None:
            self.branch = branch
        if clone_directory is not None:
            self.clone_directory = clone_directory
        if creds is not None:
            self.creds = creds
        if file_path is not None:
            self.file_path = file_path
        if insecure_ignore_host_key is not None:
            self.insecure_ignore_host_key = insecure_ignore_host_key
        if ref is not None:
            self.ref = ref
        if remote is not None:
            self.remote = remote
        if ssh_key_secret is not None:
            self.ssh_key_secret = ssh_key_secret
        if tag is not None:
            self.tag = tag
        if url is not None:
            self.url = url

    @property
    def branch(self):
        """Gets the branch of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The branch of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this IoArgoprojEventsV1alpha1GitArtifact.


        :param branch: The branch of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def clone_directory(self):
        """Gets the clone_directory of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501

        Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.  # noqa: E501

        :return: The clone_directory of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._clone_directory

    @clone_directory.setter
    def clone_directory(self, clone_directory):
        """Sets the clone_directory of this IoArgoprojEventsV1alpha1GitArtifact.

        Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.  # noqa: E501

        :param clone_directory: The clone_directory of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._clone_directory = clone_directory

    @property
    def creds(self):
        """Gets the creds of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The creds of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1GitCreds
        """
        return self._creds

    @creds.setter
    def creds(self, creds):
        """Sets the creds of this IoArgoprojEventsV1alpha1GitArtifact.


        :param creds: The creds of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1GitCreds
        """

        self._creds = creds

    @property
    def file_path(self):
        """Gets the file_path of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The file_path of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this IoArgoprojEventsV1alpha1GitArtifact.


        :param file_path: The file_path of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def insecure_ignore_host_key(self):
        """Gets the insecure_ignore_host_key of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The insecure_ignore_host_key of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: bool
        """
        return self._insecure_ignore_host_key

    @insecure_ignore_host_key.setter
    def insecure_ignore_host_key(self, insecure_ignore_host_key):
        """Sets the insecure_ignore_host_key of this IoArgoprojEventsV1alpha1GitArtifact.


        :param insecure_ignore_host_key: The insecure_ignore_host_key of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: bool
        """

        self._insecure_ignore_host_key = insecure_ignore_host_key

    @property
    def ref(self):
        """Gets the ref of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The ref of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this IoArgoprojEventsV1alpha1GitArtifact.


        :param ref: The ref of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def remote(self):
        """Gets the remote of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The remote of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1GitRemoteConfig
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this IoArgoprojEventsV1alpha1GitArtifact.


        :param remote: The remote of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1GitRemoteConfig
        """

        self._remote = remote

    @property
    def ssh_key_secret(self):
        """Gets the ssh_key_secret of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The ssh_key_secret of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._ssh_key_secret

    @ssh_key_secret.setter
    def ssh_key_secret(self, ssh_key_secret):
        """Sets the ssh_key_secret of this IoArgoprojEventsV1alpha1GitArtifact.


        :param ssh_key_secret: The ssh_key_secret of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._ssh_key_secret = ssh_key_secret

    @property
    def tag(self):
        """Gets the tag of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The tag of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this IoArgoprojEventsV1alpha1GitArtifact.


        :param tag: The tag of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def url(self):
        """Gets the url of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501


        :return: The url of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoArgoprojEventsV1alpha1GitArtifact.


        :param url: The url of this IoArgoprojEventsV1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojEventsV1alpha1GitArtifact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1GitArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1GitArtifact):
            return True

        return self.to_dict() != other.to_dict()

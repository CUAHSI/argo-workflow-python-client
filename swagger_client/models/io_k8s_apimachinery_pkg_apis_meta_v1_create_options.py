# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoK8sApimachineryPkgApisMetaV1CreateOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dry_run': 'list[str]',
        'field_manager': 'str',
        'field_validation': 'str'
    }

    attribute_map = {
        'dry_run': 'dryRun',
        'field_manager': 'fieldManager',
        'field_validation': 'fieldValidation'
    }

    def __init__(self, dry_run=None, field_manager=None, field_validation=None, _configuration=None):  # noqa: E501
        """IoK8sApimachineryPkgApisMetaV1CreateOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dry_run = None
        self._field_manager = None
        self._field_validation = None
        self.discriminator = None

        if dry_run is not None:
            self.dry_run = dry_run
        if field_manager is not None:
            self.field_manager = field_manager
        if field_validation is not None:
            self.field_validation = field_validation

    @property
    def dry_run(self):
        """Gets the dry_run of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501


        :return: The dry_run of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this IoK8sApimachineryPkgApisMetaV1CreateOptions.


        :param dry_run: The dry_run of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501
        :type: list[str]
        """

        self._dry_run = dry_run

    @property
    def field_manager(self):
        """Gets the field_manager of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501


        :return: The field_manager of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501
        :rtype: str
        """
        return self._field_manager

    @field_manager.setter
    def field_manager(self, field_manager):
        """Sets the field_manager of this IoK8sApimachineryPkgApisMetaV1CreateOptions.


        :param field_manager: The field_manager of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501
        :type: str
        """

        self._field_manager = field_manager

    @property
    def field_validation(self):
        """Gets the field_validation of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501


        :return: The field_validation of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501
        :rtype: str
        """
        return self._field_validation

    @field_validation.setter
    def field_validation(self, field_validation):
        """Sets the field_validation of this IoK8sApimachineryPkgApisMetaV1CreateOptions.


        :param field_validation: The field_validation of this IoK8sApimachineryPkgApisMetaV1CreateOptions.  # noqa: E501
        :type: str
        """

        self._field_validation = field_validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApimachineryPkgApisMetaV1CreateOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApimachineryPkgApisMetaV1CreateOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoK8sApimachineryPkgApisMetaV1CreateOptions):
            return True

        return self.to_dict() != other.to_dict()

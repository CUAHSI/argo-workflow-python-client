# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1Submit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arguments': 'IoArgoprojWorkflowV1alpha1Arguments',
        'metadata': 'IoK8sApimachineryPkgApisMetaV1ObjectMeta',
        'workflow_template_ref': 'IoArgoprojWorkflowV1alpha1WorkflowTemplateRef'
    }

    attribute_map = {
        'arguments': 'arguments',
        'metadata': 'metadata',
        'workflow_template_ref': 'workflowTemplateRef'
    }

    def __init__(self, arguments=None, metadata=None, workflow_template_ref=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1Submit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._arguments = None
        self._metadata = None
        self._workflow_template_ref = None
        self.discriminator = None

        if arguments is not None:
            self.arguments = arguments
        if metadata is not None:
            self.metadata = metadata
        self.workflow_template_ref = workflow_template_ref

    @property
    def arguments(self):
        """Gets the arguments of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501

        Arguments extracted from the event and then set as arguments to the workflow created.  # noqa: E501

        :return: The arguments of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1Arguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this IoArgoprojWorkflowV1alpha1Submit.

        Arguments extracted from the event and then set as arguments to the workflow created.  # noqa: E501

        :param arguments: The arguments of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1Arguments
        """

        self._arguments = arguments

    @property
    def metadata(self):
        """Gets the metadata of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501

        Metadata optional means to customize select fields of the workflow metadata  # noqa: E501

        :return: The metadata of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoArgoprojWorkflowV1alpha1Submit.

        Metadata optional means to customize select fields of the workflow metadata  # noqa: E501

        :param metadata: The metadata of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        """

        self._metadata = metadata

    @property
    def workflow_template_ref(self):
        """Gets the workflow_template_ref of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501

        WorkflowTemplateRef the workflow template to submit  # noqa: E501

        :return: The workflow_template_ref of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1WorkflowTemplateRef
        """
        return self._workflow_template_ref

    @workflow_template_ref.setter
    def workflow_template_ref(self, workflow_template_ref):
        """Sets the workflow_template_ref of this IoArgoprojWorkflowV1alpha1Submit.

        WorkflowTemplateRef the workflow template to submit  # noqa: E501

        :param workflow_template_ref: The workflow_template_ref of this IoArgoprojWorkflowV1alpha1Submit.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1WorkflowTemplateRef
        """
        if self._configuration.client_side_validation and workflow_template_ref is None:
            raise ValueError("Invalid value for `workflow_template_ref`, must not be `None`")  # noqa: E501

        self._workflow_template_ref = workflow_template_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1Submit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1Submit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1Submit):
            return True

        return self.to_dict() != other.to_dict()

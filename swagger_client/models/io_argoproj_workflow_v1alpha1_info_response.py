# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1InfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[IoArgoprojWorkflowV1alpha1Column]',
        'links': 'list[IoArgoprojWorkflowV1alpha1Link]',
        'managed_namespace': 'str',
        'modals': 'dict(str, bool)',
        'nav_color': 'str'
    }

    attribute_map = {
        'columns': 'columns',
        'links': 'links',
        'managed_namespace': 'managedNamespace',
        'modals': 'modals',
        'nav_color': 'navColor'
    }

    def __init__(self, columns=None, links=None, managed_namespace=None, modals=None, nav_color=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1InfoResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._columns = None
        self._links = None
        self._managed_namespace = None
        self._modals = None
        self._nav_color = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if links is not None:
            self.links = links
        if managed_namespace is not None:
            self.managed_namespace = managed_namespace
        if modals is not None:
            self.modals = modals
        if nav_color is not None:
            self.nav_color = nav_color

    @property
    def columns(self):
        """Gets the columns of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501


        :return: The columns of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :rtype: list[IoArgoprojWorkflowV1alpha1Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this IoArgoprojWorkflowV1alpha1InfoResponse.


        :param columns: The columns of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :type: list[IoArgoprojWorkflowV1alpha1Column]
        """

        self._columns = columns

    @property
    def links(self):
        """Gets the links of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501


        :return: The links of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :rtype: list[IoArgoprojWorkflowV1alpha1Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IoArgoprojWorkflowV1alpha1InfoResponse.


        :param links: The links of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :type: list[IoArgoprojWorkflowV1alpha1Link]
        """

        self._links = links

    @property
    def managed_namespace(self):
        """Gets the managed_namespace of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501


        :return: The managed_namespace of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._managed_namespace

    @managed_namespace.setter
    def managed_namespace(self, managed_namespace):
        """Sets the managed_namespace of this IoArgoprojWorkflowV1alpha1InfoResponse.


        :param managed_namespace: The managed_namespace of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :type: str
        """

        self._managed_namespace = managed_namespace

    @property
    def modals(self):
        """Gets the modals of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501


        :return: The modals of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._modals

    @modals.setter
    def modals(self, modals):
        """Sets the modals of this IoArgoprojWorkflowV1alpha1InfoResponse.


        :param modals: The modals of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :type: dict(str, bool)
        """

        self._modals = modals

    @property
    def nav_color(self):
        """Gets the nav_color of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501


        :return: The nav_color of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._nav_color

    @nav_color.setter
    def nav_color(self, nav_color):
        """Sets the nav_color of this IoArgoprojWorkflowV1alpha1InfoResponse.


        :param nav_color: The nav_color of this IoArgoprojWorkflowV1alpha1InfoResponse.  # noqa: E501
        :type: str
        """

        self._nav_color = nav_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1InfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1InfoResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1InfoResponse):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1PodGC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete_delay_duration': 'IoK8sApimachineryPkgApisMetaV1Duration',
        'label_selector': 'IoK8sApimachineryPkgApisMetaV1LabelSelector',
        'strategy': 'str'
    }

    attribute_map = {
        'delete_delay_duration': 'deleteDelayDuration',
        'label_selector': 'labelSelector',
        'strategy': 'strategy'
    }

    def __init__(self, delete_delay_duration=None, label_selector=None, strategy=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1PodGC - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._delete_delay_duration = None
        self._label_selector = None
        self._strategy = None
        self.discriminator = None

        if delete_delay_duration is not None:
            self.delete_delay_duration = delete_delay_duration
        if label_selector is not None:
            self.label_selector = label_selector
        if strategy is not None:
            self.strategy = strategy

    @property
    def delete_delay_duration(self):
        """Gets the delete_delay_duration of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501

        DeleteDelayDuration specifies the duration before pods in the GC queue get deleted.  # noqa: E501

        :return: The delete_delay_duration of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1Duration
        """
        return self._delete_delay_duration

    @delete_delay_duration.setter
    def delete_delay_duration(self, delete_delay_duration):
        """Sets the delete_delay_duration of this IoArgoprojWorkflowV1alpha1PodGC.

        DeleteDelayDuration specifies the duration before pods in the GC queue get deleted.  # noqa: E501

        :param delete_delay_duration: The delete_delay_duration of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1Duration
        """

        self._delete_delay_duration = delete_delay_duration

    @property
    def label_selector(self):
        """Gets the label_selector of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501

        LabelSelector is the label selector to check if the pods match the labels before being added to the pod GC queue.  # noqa: E501

        :return: The label_selector of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this IoArgoprojWorkflowV1alpha1PodGC.

        LabelSelector is the label selector to check if the pods match the labels before being added to the pod GC queue.  # noqa: E501

        :param label_selector: The label_selector of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1LabelSelector
        """

        self._label_selector = label_selector

    @property
    def strategy(self):
        """Gets the strategy of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501

        Strategy is the strategy to use. One of \"OnPodCompletion\", \"OnPodSuccess\", \"OnWorkflowCompletion\", \"OnWorkflowSuccess\". If unset, does not delete Pods  # noqa: E501

        :return: The strategy of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this IoArgoprojWorkflowV1alpha1PodGC.

        Strategy is the strategy to use. One of \"OnPodCompletion\", \"OnPodSuccess\", \"OnWorkflowCompletion\", \"OnWorkflowSuccess\". If unset, does not delete Pods  # noqa: E501

        :param strategy: The strategy of this IoArgoprojWorkflowV1alpha1PodGC.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1PodGC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1PodGC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1PodGC):
            return True

        return self.to_dict() != other.to_dict()

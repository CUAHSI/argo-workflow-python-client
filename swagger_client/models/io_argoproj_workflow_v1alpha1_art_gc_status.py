# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1ArtGCStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'not_specified': 'bool',
        'pods_recouped': 'dict(str, bool)',
        'strategies_processed': 'dict(str, bool)'
    }

    attribute_map = {
        'not_specified': 'notSpecified',
        'pods_recouped': 'podsRecouped',
        'strategies_processed': 'strategiesProcessed'
    }

    def __init__(self, not_specified=None, pods_recouped=None, strategies_processed=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1ArtGCStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._not_specified = None
        self._pods_recouped = None
        self._strategies_processed = None
        self.discriminator = None

        if not_specified is not None:
            self.not_specified = not_specified
        if pods_recouped is not None:
            self.pods_recouped = pods_recouped
        if strategies_processed is not None:
            self.strategies_processed = strategies_processed

    @property
    def not_specified(self):
        """Gets the not_specified of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501

        if this is true, we already checked to see if we need to do it and we don't  # noqa: E501

        :return: The not_specified of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501
        :rtype: bool
        """
        return self._not_specified

    @not_specified.setter
    def not_specified(self, not_specified):
        """Sets the not_specified of this IoArgoprojWorkflowV1alpha1ArtGCStatus.

        if this is true, we already checked to see if we need to do it and we don't  # noqa: E501

        :param not_specified: The not_specified of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501
        :type: bool
        """

        self._not_specified = not_specified

    @property
    def pods_recouped(self):
        """Gets the pods_recouped of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501

        have completed Pods been processed? (mapped by Pod name) used to prevent re-processing the Status of a Pod more than once  # noqa: E501

        :return: The pods_recouped of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._pods_recouped

    @pods_recouped.setter
    def pods_recouped(self, pods_recouped):
        """Sets the pods_recouped of this IoArgoprojWorkflowV1alpha1ArtGCStatus.

        have completed Pods been processed? (mapped by Pod name) used to prevent re-processing the Status of a Pod more than once  # noqa: E501

        :param pods_recouped: The pods_recouped of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501
        :type: dict(str, bool)
        """

        self._pods_recouped = pods_recouped

    @property
    def strategies_processed(self):
        """Gets the strategies_processed of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501

        have Pods been started to perform this strategy? (enables us not to re-process what we've already done)  # noqa: E501

        :return: The strategies_processed of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._strategies_processed

    @strategies_processed.setter
    def strategies_processed(self, strategies_processed):
        """Sets the strategies_processed of this IoArgoprojWorkflowV1alpha1ArtGCStatus.

        have Pods been started to perform this strategy? (enables us not to re-process what we've already done)  # noqa: E501

        :param strategies_processed: The strategies_processed of this IoArgoprojWorkflowV1alpha1ArtGCStatus.  # noqa: E501
        :type: dict(str, bool)
        """

        self._strategies_processed = strategies_processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1ArtGCStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtGCStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtGCStatus):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1ContainerSetTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'containers': 'list[IoArgoprojWorkflowV1alpha1ContainerNode]',
        'retry_strategy': 'IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy',
        'volume_mounts': 'list[IoK8sApiCoreV1VolumeMount]'
    }

    attribute_map = {
        'containers': 'containers',
        'retry_strategy': 'retryStrategy',
        'volume_mounts': 'volumeMounts'
    }

    def __init__(self, containers=None, retry_strategy=None, volume_mounts=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1ContainerSetTemplate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._containers = None
        self._retry_strategy = None
        self._volume_mounts = None
        self.discriminator = None

        self.containers = containers
        if retry_strategy is not None:
            self.retry_strategy = retry_strategy
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts

    @property
    def containers(self):
        """Gets the containers of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501


        :return: The containers of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501
        :rtype: list[IoArgoprojWorkflowV1alpha1ContainerNode]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.


        :param containers: The containers of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501
        :type: list[IoArgoprojWorkflowV1alpha1ContainerNode]
        """
        if self._configuration.client_side_validation and containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def retry_strategy(self):
        """Gets the retry_strategy of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501

        RetryStrategy describes how to retry a container nodes in the container set if it fails. Nbr of retries(default 0) and sleep duration between retries(default 0s, instant retry) can be set.  # noqa: E501

        :return: The retry_strategy of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy
        """
        return self._retry_strategy

    @retry_strategy.setter
    def retry_strategy(self, retry_strategy):
        """Sets the retry_strategy of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.

        RetryStrategy describes how to retry a container nodes in the container set if it fails. Nbr of retries(default 0) and sleep duration between retries(default 0s, instant retry) can be set.  # noqa: E501

        :param retry_strategy: The retry_strategy of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1ContainerSetRetryStrategy
        """

        self._retry_strategy = retry_strategy

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501


        :return: The volume_mounts of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501
        :rtype: list[IoK8sApiCoreV1VolumeMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.


        :param volume_mounts: The volume_mounts of this IoArgoprojWorkflowV1alpha1ContainerSetTemplate.  # noqa: E501
        :type: list[IoK8sApiCoreV1VolumeMount]
        """

        self._volume_mounts = volume_mounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1ContainerSetTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ContainerSetTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ContainerSetTemplate):
            return True

        return self.to_dict() != other.to_dict()

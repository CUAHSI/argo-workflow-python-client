# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'force_finalizer_removal': 'bool',
        'pod_metadata': 'IoArgoprojWorkflowV1alpha1Metadata',
        'pod_spec_patch': 'str',
        'service_account_name': 'str',
        'strategy': 'str'
    }

    attribute_map = {
        'force_finalizer_removal': 'forceFinalizerRemoval',
        'pod_metadata': 'podMetadata',
        'pod_spec_patch': 'podSpecPatch',
        'service_account_name': 'serviceAccountName',
        'strategy': 'strategy'
    }

    def __init__(self, force_finalizer_removal=None, pod_metadata=None, pod_spec_patch=None, service_account_name=None, strategy=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._force_finalizer_removal = None
        self._pod_metadata = None
        self._pod_spec_patch = None
        self._service_account_name = None
        self._strategy = None
        self.discriminator = None

        if force_finalizer_removal is not None:
            self.force_finalizer_removal = force_finalizer_removal
        if pod_metadata is not None:
            self.pod_metadata = pod_metadata
        if pod_spec_patch is not None:
            self.pod_spec_patch = pod_spec_patch
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if strategy is not None:
            self.strategy = strategy

    @property
    def force_finalizer_removal(self):
        """Gets the force_finalizer_removal of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501

        ForceFinalizerRemoval: if set to true, the finalizer will be removed in the case that Artifact GC fails  # noqa: E501

        :return: The force_finalizer_removal of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :rtype: bool
        """
        return self._force_finalizer_removal

    @force_finalizer_removal.setter
    def force_finalizer_removal(self, force_finalizer_removal):
        """Sets the force_finalizer_removal of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.

        ForceFinalizerRemoval: if set to true, the finalizer will be removed in the case that Artifact GC fails  # noqa: E501

        :param force_finalizer_removal: The force_finalizer_removal of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :type: bool
        """

        self._force_finalizer_removal = force_finalizer_removal

    @property
    def pod_metadata(self):
        """Gets the pod_metadata of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501

        PodMetadata is an optional field for specifying the Labels and Annotations that should be assigned to the Pod doing the deletion  # noqa: E501

        :return: The pod_metadata of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1Metadata
        """
        return self._pod_metadata

    @pod_metadata.setter
    def pod_metadata(self, pod_metadata):
        """Sets the pod_metadata of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.

        PodMetadata is an optional field for specifying the Labels and Annotations that should be assigned to the Pod doing the deletion  # noqa: E501

        :param pod_metadata: The pod_metadata of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1Metadata
        """

        self._pod_metadata = pod_metadata

    @property
    def pod_spec_patch(self):
        """Gets the pod_spec_patch of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501

        PodSpecPatch holds strategic merge patch to apply against the artgc pod spec.  # noqa: E501

        :return: The pod_spec_patch of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :rtype: str
        """
        return self._pod_spec_patch

    @pod_spec_patch.setter
    def pod_spec_patch(self, pod_spec_patch):
        """Sets the pod_spec_patch of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.

        PodSpecPatch holds strategic merge patch to apply against the artgc pod spec.  # noqa: E501

        :param pod_spec_patch: The pod_spec_patch of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :type: str
        """

        self._pod_spec_patch = pod_spec_patch

    @property
    def service_account_name(self):
        """Gets the service_account_name of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501

        ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion  # noqa: E501

        :return: The service_account_name of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.

        ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion  # noqa: E501

        :param service_account_name: The service_account_name of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def strategy(self):
        """Gets the strategy of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501

        Strategy is the strategy to use.  # noqa: E501

        :return: The strategy of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.

        Strategy is the strategy to use.  # noqa: E501

        :param strategy: The strategy of this IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1WorkflowLevelArtifactGC):
            return True

        return self.to_dict() != other.to_dict()

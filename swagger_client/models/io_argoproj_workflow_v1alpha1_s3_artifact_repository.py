# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1S3ArtifactRepository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key_secret': 'IoK8sApiCoreV1SecretKeySelector',
        'bucket': 'str',
        'ca_secret': 'IoK8sApiCoreV1SecretKeySelector',
        'create_bucket_if_not_present': 'IoArgoprojWorkflowV1alpha1CreateS3BucketOptions',
        'encryption_options': 'IoArgoprojWorkflowV1alpha1S3EncryptionOptions',
        'endpoint': 'str',
        'insecure': 'bool',
        'key_format': 'str',
        'key_prefix': 'str',
        'region': 'str',
        'role_arn': 'str',
        'secret_key_secret': 'IoK8sApiCoreV1SecretKeySelector',
        'use_sdk_creds': 'bool'
    }

    attribute_map = {
        'access_key_secret': 'accessKeySecret',
        'bucket': 'bucket',
        'ca_secret': 'caSecret',
        'create_bucket_if_not_present': 'createBucketIfNotPresent',
        'encryption_options': 'encryptionOptions',
        'endpoint': 'endpoint',
        'insecure': 'insecure',
        'key_format': 'keyFormat',
        'key_prefix': 'keyPrefix',
        'region': 'region',
        'role_arn': 'roleARN',
        'secret_key_secret': 'secretKeySecret',
        'use_sdk_creds': 'useSDKCreds'
    }

    def __init__(self, access_key_secret=None, bucket=None, ca_secret=None, create_bucket_if_not_present=None, encryption_options=None, endpoint=None, insecure=None, key_format=None, key_prefix=None, region=None, role_arn=None, secret_key_secret=None, use_sdk_creds=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1S3ArtifactRepository - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_key_secret = None
        self._bucket = None
        self._ca_secret = None
        self._create_bucket_if_not_present = None
        self._encryption_options = None
        self._endpoint = None
        self._insecure = None
        self._key_format = None
        self._key_prefix = None
        self._region = None
        self._role_arn = None
        self._secret_key_secret = None
        self._use_sdk_creds = None
        self.discriminator = None

        if access_key_secret is not None:
            self.access_key_secret = access_key_secret
        if bucket is not None:
            self.bucket = bucket
        if ca_secret is not None:
            self.ca_secret = ca_secret
        if create_bucket_if_not_present is not None:
            self.create_bucket_if_not_present = create_bucket_if_not_present
        if encryption_options is not None:
            self.encryption_options = encryption_options
        if endpoint is not None:
            self.endpoint = endpoint
        if insecure is not None:
            self.insecure = insecure
        if key_format is not None:
            self.key_format = key_format
        if key_prefix is not None:
            self.key_prefix = key_prefix
        if region is not None:
            self.region = region
        if role_arn is not None:
            self.role_arn = role_arn
        if secret_key_secret is not None:
            self.secret_key_secret = secret_key_secret
        if use_sdk_creds is not None:
            self.use_sdk_creds = use_sdk_creds

    @property
    def access_key_secret(self):
        """Gets the access_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        AccessKeySecret is the secret selector to the bucket's access key  # noqa: E501

        :return: The access_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._access_key_secret

    @access_key_secret.setter
    def access_key_secret(self, access_key_secret):
        """Sets the access_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        AccessKeySecret is the secret selector to the bucket's access key  # noqa: E501

        :param access_key_secret: The access_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._access_key_secret = access_key_secret

    @property
    def bucket(self):
        """Gets the bucket of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        Bucket is the name of the bucket  # noqa: E501

        :return: The bucket of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        Bucket is the name of the bucket  # noqa: E501

        :param bucket: The bucket of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def ca_secret(self):
        """Gets the ca_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        CASecret specifies the secret that contains the CA, used to verify the TLS connection  # noqa: E501

        :return: The ca_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._ca_secret

    @ca_secret.setter
    def ca_secret(self, ca_secret):
        """Sets the ca_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        CASecret specifies the secret that contains the CA, used to verify the TLS connection  # noqa: E501

        :param ca_secret: The ca_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._ca_secret = ca_secret

    @property
    def create_bucket_if_not_present(self):
        """Gets the create_bucket_if_not_present of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.  # noqa: E501

        :return: The create_bucket_if_not_present of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1CreateS3BucketOptions
        """
        return self._create_bucket_if_not_present

    @create_bucket_if_not_present.setter
    def create_bucket_if_not_present(self, create_bucket_if_not_present):
        """Sets the create_bucket_if_not_present of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.  # noqa: E501

        :param create_bucket_if_not_present: The create_bucket_if_not_present of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1CreateS3BucketOptions
        """

        self._create_bucket_if_not_present = create_bucket_if_not_present

    @property
    def encryption_options(self):
        """Gets the encryption_options of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501


        :return: The encryption_options of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1S3EncryptionOptions
        """
        return self._encryption_options

    @encryption_options.setter
    def encryption_options(self, encryption_options):
        """Sets the encryption_options of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.


        :param encryption_options: The encryption_options of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1S3EncryptionOptions
        """

        self._encryption_options = encryption_options

    @property
    def endpoint(self):
        """Gets the endpoint of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        Endpoint is the hostname of the bucket endpoint  # noqa: E501

        :return: The endpoint of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        Endpoint is the hostname of the bucket endpoint  # noqa: E501

        :param endpoint: The endpoint of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def insecure(self):
        """Gets the insecure of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        Insecure will connect to the service with TLS  # noqa: E501

        :return: The insecure of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """Sets the insecure of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        Insecure will connect to the service with TLS  # noqa: E501

        :param insecure: The insecure of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: bool
        """

        self._insecure = insecure

    @property
    def key_format(self):
        """Gets the key_format of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        KeyFormat defines the format of how to store keys and can reference workflow variables.  # noqa: E501

        :return: The key_format of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._key_format

    @key_format.setter
    def key_format(self, key_format):
        """Sets the key_format of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        KeyFormat defines the format of how to store keys and can reference workflow variables.  # noqa: E501

        :param key_format: The key_format of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: str
        """

        self._key_format = key_format

    @property
    def key_prefix(self):
        """Gets the key_prefix of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        KeyPrefix is prefix used as part of the bucket key in which the controller will store artifacts. DEPRECATED. Use KeyFormat instead  # noqa: E501

        :return: The key_prefix of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        KeyPrefix is prefix used as part of the bucket key in which the controller will store artifacts. DEPRECATED. Use KeyFormat instead  # noqa: E501

        :param key_prefix: The key_prefix of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: str
        """

        self._key_prefix = key_prefix

    @property
    def region(self):
        """Gets the region of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        Region contains the optional bucket region  # noqa: E501

        :return: The region of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        Region contains the optional bucket region  # noqa: E501

        :param region: The region of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def role_arn(self):
        """Gets the role_arn of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        RoleARN is the Amazon Resource Name (ARN) of the role to assume.  # noqa: E501

        :return: The role_arn of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        RoleARN is the Amazon Resource Name (ARN) of the role to assume.  # noqa: E501

        :param role_arn: The role_arn of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: str
        """

        self._role_arn = role_arn

    @property
    def secret_key_secret(self):
        """Gets the secret_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        SecretKeySecret is the secret selector to the bucket's secret key  # noqa: E501

        :return: The secret_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: IoK8sApiCoreV1SecretKeySelector
        """
        return self._secret_key_secret

    @secret_key_secret.setter
    def secret_key_secret(self, secret_key_secret):
        """Sets the secret_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        SecretKeySecret is the secret selector to the bucket's secret key  # noqa: E501

        :param secret_key_secret: The secret_key_secret of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: IoK8sApiCoreV1SecretKeySelector
        """

        self._secret_key_secret = secret_key_secret

    @property
    def use_sdk_creds(self):
        """Gets the use_sdk_creds of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501

        UseSDKCreds tells the driver to figure out credentials based on sdk defaults.  # noqa: E501

        :return: The use_sdk_creds of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :rtype: bool
        """
        return self._use_sdk_creds

    @use_sdk_creds.setter
    def use_sdk_creds(self, use_sdk_creds):
        """Sets the use_sdk_creds of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.

        UseSDKCreds tells the driver to figure out credentials based on sdk defaults.  # noqa: E501

        :param use_sdk_creds: The use_sdk_creds of this IoArgoprojWorkflowV1alpha1S3ArtifactRepository.  # noqa: E501
        :type: bool
        """

        self._use_sdk_creds = use_sdk_creds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1S3ArtifactRepository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1S3ArtifactRepository):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1S3ArtifactRepository):
            return True

        return self.to_dict() != other.to_dict()

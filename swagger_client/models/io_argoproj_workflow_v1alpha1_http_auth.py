# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1HTTPAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basic_auth': 'IoArgoprojWorkflowV1alpha1BasicAuth',
        'client_cert': 'IoArgoprojWorkflowV1alpha1ClientCertAuth',
        'oauth2': 'IoArgoprojWorkflowV1alpha1OAuth2Auth'
    }

    attribute_map = {
        'basic_auth': 'basicAuth',
        'client_cert': 'clientCert',
        'oauth2': 'oauth2'
    }

    def __init__(self, basic_auth=None, client_cert=None, oauth2=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1HTTPAuth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._basic_auth = None
        self._client_cert = None
        self._oauth2 = None
        self.discriminator = None

        if basic_auth is not None:
            self.basic_auth = basic_auth
        if client_cert is not None:
            self.client_cert = client_cert
        if oauth2 is not None:
            self.oauth2 = oauth2

    @property
    def basic_auth(self):
        """Gets the basic_auth of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501


        :return: The basic_auth of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1BasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this IoArgoprojWorkflowV1alpha1HTTPAuth.


        :param basic_auth: The basic_auth of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1BasicAuth
        """

        self._basic_auth = basic_auth

    @property
    def client_cert(self):
        """Gets the client_cert of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501


        :return: The client_cert of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1ClientCertAuth
        """
        return self._client_cert

    @client_cert.setter
    def client_cert(self, client_cert):
        """Sets the client_cert of this IoArgoprojWorkflowV1alpha1HTTPAuth.


        :param client_cert: The client_cert of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1ClientCertAuth
        """

        self._client_cert = client_cert

    @property
    def oauth2(self):
        """Gets the oauth2 of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501


        :return: The oauth2 of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1OAuth2Auth
        """
        return self._oauth2

    @oauth2.setter
    def oauth2(self, oauth2):
        """Sets the oauth2 of this IoArgoprojWorkflowV1alpha1HTTPAuth.


        :param oauth2: The oauth2 of this IoArgoprojWorkflowV1alpha1HTTPAuth.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1OAuth2Auth
        """

        self._oauth2 = oauth2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1HTTPAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1HTTPAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1HTTPAuth):
            return True

        return self.to_dict() != other.to_dict()

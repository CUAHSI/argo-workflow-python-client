# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IoArgoprojWorkflowV1alpha1LifecycleHook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arguments': 'IoArgoprojWorkflowV1alpha1Arguments',
        'expression': 'str',
        'template': 'str',
        'template_ref': 'IoArgoprojWorkflowV1alpha1TemplateRef'
    }

    attribute_map = {
        'arguments': 'arguments',
        'expression': 'expression',
        'template': 'template',
        'template_ref': 'templateRef'
    }

    def __init__(self, arguments=None, expression=None, template=None, template_ref=None, _configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1LifecycleHook - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._arguments = None
        self._expression = None
        self._template = None
        self._template_ref = None
        self.discriminator = None

        if arguments is not None:
            self.arguments = arguments
        if expression is not None:
            self.expression = expression
        if template is not None:
            self.template = template
        if template_ref is not None:
            self.template_ref = template_ref

    @property
    def arguments(self):
        """Gets the arguments of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501

        Arguments hold arguments to the template  # noqa: E501

        :return: The arguments of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1Arguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this IoArgoprojWorkflowV1alpha1LifecycleHook.

        Arguments hold arguments to the template  # noqa: E501

        :param arguments: The arguments of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1Arguments
        """

        self._arguments = arguments

    @property
    def expression(self):
        """Gets the expression of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501

        Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored  # noqa: E501

        :return: The expression of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this IoArgoprojWorkflowV1alpha1LifecycleHook.

        Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not be retried and the retry strategy will be ignored  # noqa: E501

        :param expression: The expression of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def template(self):
        """Gets the template of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501

        Template is the name of the template to execute by the hook  # noqa: E501

        :return: The template of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this IoArgoprojWorkflowV1alpha1LifecycleHook.

        Template is the name of the template to execute by the hook  # noqa: E501

        :param template: The template of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def template_ref(self):
        """Gets the template_ref of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501

        TemplateRef is the reference to the template resource to execute by the hook  # noqa: E501

        :return: The template_ref of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1TemplateRef
        """
        return self._template_ref

    @template_ref.setter
    def template_ref(self, template_ref):
        """Sets the template_ref of this IoArgoprojWorkflowV1alpha1LifecycleHook.

        TemplateRef is the reference to the template resource to execute by the hook  # noqa: E501

        :param template_ref: The template_ref of this IoArgoprojWorkflowV1alpha1LifecycleHook.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1TemplateRef
        """

        self._template_ref = template_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoArgoprojWorkflowV1alpha1LifecycleHook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1LifecycleHook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1LifecycleHook):
            return True

        return self.to_dict() != other.to_dict()

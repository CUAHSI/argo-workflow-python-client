# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/  # noqa: E501

    OpenAPI spec version: VERSION
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.workflow_service_api import WorkflowServiceApi  # noqa: E501
from swagger_client.rest import ApiException


class TestWorkflowServiceApi(unittest.TestCase):
    """WorkflowServiceApi unit test stubs"""

    def setUp(self):
        self.api = swagger_client.api.workflow_service_api.WorkflowServiceApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_workflow_service_create_workflow(self):
        """Test case for workflow_service_create_workflow

        """
        pass

    def test_workflow_service_delete_workflow(self):
        """Test case for workflow_service_delete_workflow

        """
        pass

    def test_workflow_service_get_workflow(self):
        """Test case for workflow_service_get_workflow

        """
        pass

    def test_workflow_service_lint_workflow(self):
        """Test case for workflow_service_lint_workflow

        """
        pass

    def test_workflow_service_list_workflows(self):
        """Test case for workflow_service_list_workflows

        """
        pass

    def test_workflow_service_pod_logs(self):
        """Test case for workflow_service_pod_logs

        DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.  # noqa: E501
        """
        pass

    def test_workflow_service_resubmit_workflow(self):
        """Test case for workflow_service_resubmit_workflow

        """
        pass

    def test_workflow_service_resume_workflow(self):
        """Test case for workflow_service_resume_workflow

        """
        pass

    def test_workflow_service_retry_workflow(self):
        """Test case for workflow_service_retry_workflow

        """
        pass

    def test_workflow_service_set_workflow(self):
        """Test case for workflow_service_set_workflow

        """
        pass

    def test_workflow_service_stop_workflow(self):
        """Test case for workflow_service_stop_workflow

        """
        pass

    def test_workflow_service_submit_workflow(self):
        """Test case for workflow_service_submit_workflow

        """
        pass

    def test_workflow_service_suspend_workflow(self):
        """Test case for workflow_service_suspend_workflow

        """
        pass

    def test_workflow_service_terminate_workflow(self):
        """Test case for workflow_service_terminate_workflow

        """
        pass

    def test_workflow_service_watch_events(self):
        """Test case for workflow_service_watch_events

        """
        pass

    def test_workflow_service_watch_workflows(self):
        """Test case for workflow_service_watch_workflows

        """
        pass

    def test_workflow_service_workflow_logs(self):
        """Test case for workflow_service_workflow_logs

        """
        pass


if __name__ == '__main__':
    unittest.main()
